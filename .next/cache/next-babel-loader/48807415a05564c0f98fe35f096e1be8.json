{"ast":null,"code":"export const filterAdherentsFromSelectedDepartments = (adherents = [], departments = []) => {\n  // replace departements items by numbers\n  if (departments.length < 1) {\n    return adherents;\n  }\n\n  const newDepArray = [];\n  departments.map(dep => {\n    newDepArray.push(dep.substring(0, 2));\n  });\n  const newAdherentsArray = adherents.filter(adh => newDepArray.includes(adh.departement_siege.nom_departement.substring(0, 2)));\n  return newAdherentsArray;\n};\nexport const filterAdherentsFromSelectedExpertises = (adherents = [], expertises = []) => {\n  // console.log(\"adherents\", adherents)\n  // console.log(\"expertises\", expertises)\n  if (expertises.length < 1) {\n    return adherents;\n  }\n\n  let newAdherentsArray = [];\n  adherents.forEach(adh => {\n    if (adh.competences) {\n      let find = adh.competences.find(comp => expertises.includes(comp.type));\n\n      if (find) {\n        newAdherentsArray.push(adh);\n      }\n    }\n  });\n  return newAdherentsArray;\n};","map":{"version":3,"sources":["/Users/adriengrampone/Documents/A&F/mobin/frontend/utils/func/filters.js"],"names":["filterAdherentsFromSelectedDepartments","adherents","departments","length","newDepArray","map","dep","push","substring","newAdherentsArray","filter","adh","includes","departement_siege","nom_departement","filterAdherentsFromSelectedExpertises","expertises","forEach","competences","find","comp","type"],"mappings":"AAAA,OAAO,MAAMA,sCAAsC,GAAG,CAACC,SAAS,GAAG,EAAb,EAAiBC,WAAW,GAAG,EAA/B,KAAsC;AACxF;AACA,MAAIA,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,WAAOF,SAAP;AACH;;AACD,QAAMG,WAAW,GAAG,EAApB;AACAF,EAAAA,WAAW,CAACG,GAAZ,CAAgBC,GAAG,IAAI;AACnBF,IAAAA,WAAW,CAACG,IAAZ,CAAiBD,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAjB;AACH,GAFD;AAGA,QAAMC,iBAAiB,GAAGR,SAAS,CAACS,MAAV,CAAiBC,GAAG,IAAIP,WAAW,CAACQ,QAAZ,CAAqBD,GAAG,CAACE,iBAAJ,CAAsBC,eAAtB,CAAsCN,SAAtC,CAAgD,CAAhD,EAAmD,CAAnD,CAArB,CAAxB,CAA1B;AAEA,SAAOC,iBAAP;AACH,CAZM;AAcP,OAAO,MAAMM,qCAAqC,GAAG,CAACd,SAAS,GAAG,EAAb,EAAiBe,UAAU,GAAG,EAA9B,KAAqC;AACtF;AACA;AACA,MAAIA,UAAU,CAACb,MAAX,GAAoB,CAAxB,EAA2B;AACvB,WAAOF,SAAP;AACH;;AAED,MAAIQ,iBAAiB,GAAG,EAAxB;AAEAR,EAAAA,SAAS,CAACgB,OAAV,CAAkBN,GAAG,IAAI;AACrB,QAAIA,GAAG,CAACO,WAAR,EAAqB;AACjB,UAAIC,IAAI,GAAGR,GAAG,CAACO,WAAJ,CAAgBC,IAAhB,CAAqBC,IAAI,IAAIJ,UAAU,CAACJ,QAAX,CAAoBQ,IAAI,CAACC,IAAzB,CAA7B,CAAX;;AACA,UAAIF,IAAJ,EAAU;AACNV,QAAAA,iBAAiB,CAACF,IAAlB,CAAuBI,GAAvB;AACH;AACJ;AACJ,GAPD;AAQA,SAAOF,iBAAP;AACH,CAlBM","sourcesContent":["export const filterAdherentsFromSelectedDepartments = (adherents = [], departments = []) => {\n    // replace departements items by numbers\n    if (departments.length < 1) {\n        return adherents\n    }\n    const newDepArray = []\n    departments.map(dep => {\n        newDepArray.push(dep.substring(0, 2))\n    })\n    const newAdherentsArray = adherents.filter(adh => newDepArray.includes(adh.departement_siege.nom_departement.substring(0, 2)))\n\n    return newAdherentsArray\n}\n\nexport const filterAdherentsFromSelectedExpertises = (adherents = [], expertises = []) => {\n    // console.log(\"adherents\", adherents)\n    // console.log(\"expertises\", expertises)\n    if (expertises.length < 1) {\n        return adherents\n    }\n\n    let newAdherentsArray = []\n\n    adherents.forEach(adh => {\n        if (adh.competences) {\n            let find = adh.competences.find(comp => expertises.includes(comp.type))\n            if (find) {\n                newAdherentsArray.push(adh)\n            }\n        }\n    })\n    return newAdherentsArray\n}"]},"metadata":{},"sourceType":"module"}